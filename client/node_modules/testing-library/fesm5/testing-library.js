import { Injectable, Component, NgModule, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TestingLibraryService = /** @class */ (function () {
    function TestingLibraryService() {
    }
    TestingLibraryService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    TestingLibraryService.ctorParameters = function () { return []; };
    /** @nocollapse */ TestingLibraryService.ngInjectableDef = defineInjectable({ factory: function TestingLibraryService_Factory() { return new TestingLibraryService(); }, token: TestingLibraryService, providedIn: "root" });
    return TestingLibraryService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TestingLibraryComponent = /** @class */ (function () {
    function TestingLibraryComponent() {
    }
    /**
     * @return {?}
     */
    TestingLibraryComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    TestingLibraryComponent.decorators = [
        { type: Component, args: [{
                    selector: 'NgxMat-TestingLibrary',
                    template: "\n    <p>\n      testing-library works!\n    </p>\n  ",
                    styles: []
                },] },
    ];
    /** @nocollapse */
    TestingLibraryComponent.ctorParameters = function () { return []; };
    return TestingLibraryComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var TestingLibraryModule = /** @class */ (function () {
    function TestingLibraryModule() {
    }
    TestingLibraryModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [TestingLibraryComponent],
                    exports: [TestingLibraryComponent]
                },] },
    ];
    return TestingLibraryModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { TestingLibraryService, TestingLibraryComponent, TestingLibraryModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdGluZy1saWJyYXJ5LmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly90ZXN0aW5nLWxpYnJhcnkvbGliL3Rlc3RpbmctbGlicmFyeS5zZXJ2aWNlLnRzIiwibmc6Ly90ZXN0aW5nLWxpYnJhcnkvbGliL3Rlc3RpbmctbGlicmFyeS5jb21wb25lbnQudHMiLCJuZzovL3Rlc3RpbmctbGlicmFyeS9saWIvdGVzdGluZy1saWJyYXJ5Lm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRlc3RpbmdMaWJyYXJ5U2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ05neE1hdC1UZXN0aW5nTGlicmFyeScsXG4gIHRlbXBsYXRlOiBgXG4gICAgPHA+XG4gICAgICB0ZXN0aW5nLWxpYnJhcnkgd29ya3MhXG4gICAgPC9wPlxuICBgLFxuICBzdHlsZXM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIFRlc3RpbmdMaWJyYXJ5Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUZXN0aW5nTGlicmFyeUNvbXBvbmVudCB9IGZyb20gJy4vdGVzdGluZy1saWJyYXJ5LmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbVGVzdGluZ0xpYnJhcnlDb21wb25lbnRdLFxuICBleHBvcnRzOiBbVGVzdGluZ0xpYnJhcnlDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIFRlc3RpbmdMaWJyYXJ5TW9kdWxlIHsgfVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0lBT0U7S0FBaUI7O2dCQUxsQixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7OztnQ0FKRDs7Ozs7OztBQ0FBO0lBYUU7S0FBaUI7Ozs7SUFFakIsMENBQVE7OztJQUFSO0tBQ0M7O2dCQWRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsdUJBQXVCO29CQUNqQyxRQUFRLEVBQUUsdURBSVQ7b0JBQ0QsTUFBTSxFQUFFLEVBQUU7aUJBQ1g7Ozs7a0NBVkQ7Ozs7Ozs7QUNBQTs7OztnQkFHQyxRQUFRLFNBQUM7b0JBQ1IsT0FBTyxFQUFFLEVBQ1I7b0JBQ0QsWUFBWSxFQUFFLENBQUMsdUJBQXVCLENBQUM7b0JBQ3ZDLE9BQU8sRUFBRSxDQUFDLHVCQUF1QixDQUFDO2lCQUNuQzs7K0JBUkQ7Ozs7Ozs7Ozs7Ozs7OzsifQ==